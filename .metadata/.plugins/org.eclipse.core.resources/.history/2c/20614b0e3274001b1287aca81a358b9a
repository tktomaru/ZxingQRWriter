package com.tukutano;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Hashtable;
import javax.imageio.ImageIO;

public class GenerateQR {
  int width = 200;
  int height = 200;

  public void generateQR(String content, String output) {

    try {
      QRCodeWriter qrWriter = new QRCodeWriter();

      Hashtable hints = new Hashtable();

      // 4段階のエラー訂正率を設定できます
      // ErrorCorrectionLevel.L 7%
      // ErrorCorrectionLevel.M 15%
      // ErrorCorrectionLevel.Q 25%
      // ErrorCorrectionLevel.H 30%
      hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);

      // QRCodeWriter#encode()には以下の情報を渡す
      // (1)エンコード対象の文字列、バーコードに埋め込みたい情報
      // (2)出力するバーコードの書式
      // (3)イメージの幅
      // (4)イメージの高さ
      BitMatrix bitMatrix = qrWriter.encode(content, BarcodeFormat.QR_CODE, width, height, hints);

      BufferedImage image = MatrixToImageWriter.toBufferedImage(bitMatrix);

      // エンコードで得られたイメージを画像ファイルに出力する
      ImageIO.write(image, "png", new File(output));

    } catch (IllegalArgumentException e) {
      System.err.println("[" + content + "] をエンコードするときに例外が発生.");
      e.printStackTrace();
      System.exit(1);
    } catch (WriterException e) {
      System.err.println("[" + content + "] をエンコードするときに例外が発生.");
      e.printStackTrace();
      System.exit(1);
    } catch (IOException e) {
      System.err.println("[" + output + "] を出力するときに例外が発生.");
      e.printStackTrace();
      System.exit(1);
    }
  }
}
